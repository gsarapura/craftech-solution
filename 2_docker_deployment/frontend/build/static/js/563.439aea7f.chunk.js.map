{"version":3,"file":"static/js/563.439aea7f.chunk.js","mappings":"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","sources":["hooks/useScriptRef.js","views/auth/signup/RestRegister.js","views/auth/signup/SignUp1.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\n\nconst useScriptRef = () => {\n    const scripted = useRef(true);\n\n    useEffect(\n        () => () => {\n            scripted.current = false;\n        },\n        []\n    );\n\n    return scripted;\n};\n\nexport default useScriptRef;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Row, Col, Button, Alert } from 'react-bootstrap';\n\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport axios from 'axios';\nimport useScriptRef from '../../../hooks/useScriptRef';\nimport { API_SERVER } from './../../../config/constant';\n\nconst RestRegister = ({ className, ...rest }) => {\n    let history = useHistory();\n    const scriptedRef = useScriptRef();\n\n    return (\n        <React.Fragment>\n            <Formik\n                initialValues={{\n                    username: '',\n                    email: '',\n                    password: '',\n                    submit: null\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n                    username: Yup.string().required('Username is required'),\n                    password: Yup.string().max(255).required('Password is required')\n                })}\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n                    try {\n                        axios\n                            .post(API_SERVER + 'users/register', {\n                                username: values.username,\n                                password: values.password,\n                                email: values.email\n                            })\n                            .then(function (response) {\n                                if (response.data.success) {\n                                    history.push('/auth/signin');\n                                } else {\n                                    setStatus({ success: false });\n                                    setErrors({ submit: response.data.msg });\n                                    setSubmitting(false);\n                                }\n                            })\n                            .catch(function (error) {\n                                setStatus({ success: false });\n                                setErrors({ submit: error.response.data.msg });\n                                setSubmitting(false);\n                            });\n                    } catch (err) {\n                        console.error(err);\n                        if (scriptedRef.current) {\n                            setStatus({ success: false });\n                            setErrors({ submit: err.message });\n                            setSubmitting(false);\n                        }\n                    }\n                }}\n            >\n                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n                    <form noValidate onSubmit={handleSubmit} className={className} {...rest}>\n                        <div className=\"form-group mb-3\">\n                            <input\n                                className=\"form-control\"\n                                error={touched.username && errors.username}\n                                label=\"Username\"\n                                placeholder=\"Username\"\n                                name=\"username\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type=\"email\"\n                                value={values.username}\n                            />\n                            {touched.username && errors.username && <small className=\"text-danger form-text\">{errors.username}</small>}\n                        </div>\n                        <div className=\"form-group mb-3\">\n                            <input\n                                className=\"form-control\"\n                                error={touched.email && errors.email}\n                                label=\"Email Address\"\n                                placeholder=\"Email Address\"\n                                name=\"email\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type=\"email\"\n                                value={values.email}\n                            />\n                            {touched.email && errors.email && <small className=\"text-danger form-text\">{errors.email}</small>}\n                        </div>\n                        <div className=\"form-group mb-4\">\n                            <input\n                                className=\"form-control\"\n                                error={touched.password && errors.password}\n                                label=\"Password\"\n                                placeholder=\"Password\"\n                                name=\"password\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type=\"password\"\n                                value={values.password}\n                            />\n                            {touched.password && errors.password && <small className=\"text-danger form-text\">{errors.password}</small>}\n                        </div>\n\n                        {errors.submit && (\n                            <Col sm={12}>\n                                <Alert variant=\"danger\">{errors.submit}</Alert>\n                            </Col>\n                        )}\n\n                        <div className=\"custom-control custom-checkbox  text-left mb-4 mt-2\">\n                            <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\n                                Save credentials.\n                            </label>\n                        </div>\n\n                        <Row>\n                            <Col mt={2}>\n                                <Button\n                                    className=\"btn-block\"\n                                    color=\"primary\"\n                                    disabled={isSubmitting}\n                                    size=\"large\"\n                                    type=\"submit\"\n                                    variant=\"primary\"\n                                >\n                                    Sign UP\n                                </Button>\n                            </Col>\n                        </Row>\n                    </form>\n                )}\n            </Formik>\n            <hr />\n        </React.Fragment>\n    );\n};\n\nexport default RestRegister;\n","import React from 'react';\nimport { Card, Row, Col } from 'react-bootstrap';\nimport { NavLink } from 'react-router-dom';\n\nimport RestRegister from './RestRegister';\nimport Breadcrumb from '../../../layouts/AdminLayout/Breadcrumb';\n\nconst SignUp1 = () => {\n    return (\n        <React.Fragment>\n            <Breadcrumb />\n            <div className=\"auth-wrapper\">\n                <div className=\"auth-content\">\n                    <div className=\"auth-bg\">\n                        <span className=\"r\" />\n                        <span className=\"r s\" />\n                        <span className=\"r s\" />\n                        <span className=\"r\" />\n                    </div>\n                    <Card className=\"borderless\">\n                        <Row className=\"align-items-center\">\n                            <Col>\n                                <Card.Body className=\"text-center\">\n                                    <h4 className=\"mb-4\">Craftech Example App</h4>\n\n                                    <div className=\"mb-4\">\n                                        <i className=\"feather icon-user-plus auth-icon\" />\n                                    </div>\n\n                                    <RestRegister />\n\n                                    <p className=\"mb-2\">\n                                        Already have an account?{' '}\n                                        <NavLink to=\"/auth/signin\" className=\"f-w-400\">\n                                            Login\n                                        </NavLink>\n                                    </p>\n\n                                    <br />\n\n                                </Card.Body>\n                            </Col>\n                        </Row>\n                    </Card>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default SignUp1;\n"],"names":["scripted","useRef","useEffect","current","className","rest","history","useHistory","scriptedRef","useScriptRef","initialValues","username","email","password","submit","validationSchema","Yup","shape","max","required","onSubmit","values","setErrors","setStatus","setSubmitting","axios","API_SERVER","then","response","data","success","push","msg","catch","error","err","console","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","label","placeholder","name","onBlur","onChange","type","value","Col","sm","Alert","variant","id","htmlFor","Row","mt","Button","color","disabled","size","Breadcrumb","Card","to"],"sourceRoot":""}